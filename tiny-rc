#!/bin/sh
##
## Tiny rc (run commands) script for Linux containers
##

## When command fails, the shell exit immediately.
set -e

##
## Environments
##

: ${TINYRC_INIT_DIR:="/tiny-rc.d"}
: ${TINYRC_LIVENESS_PROBE_INITIAL_WAIT:=1}
: ${TINYRC_LIVENESS_PROBE_INTERVAL:=1}
: ${TINYRC_SHUTDOWN_PROBE_INTERVAL:=1}
: ${TINYRC_SHUTDOWN_TIMEOUT:=90}
: ${TINYRC_SHUTDOWN_SIGNAL:="TERM"}
: ${TINYRC_DISABLE_LOGGING:=}
: ${TINYRC_LOG_LEVEL:=5}


##
## Error Codes
##

ERROR_GENERAL=1
ERROR_RUN_UNIT_FAILED=2
ERROR_RUN_SERVICE_FAILED=3
ERROR_PANIC=9


##
## Logging
##

LOG_STR_LEVEL9="DEBUG"
LOG_STR_LEVEL7="INFO "
LOG_STR_LEVEL5="WARN "
LOG_STR_LEVEL3="ERROR"

LOG_DEBUG=9
LOG_INFO=7
LOG_WARN=5
LOG_ERROR=3

log() {
    level="${2}"

    ## defaul log level is LOG_DEBUG
    if [ "${level}" = "" ]; then
        level="${LOG_DEBUG}"
    fi

    if [ ${level} -le ${TINYRC_LOG_LEVEL} ]; then
        if [ ! -n "$TINYRC_DISABLE_LOGGING" ]; then
            lstr="LOG_STR_LEVEL${level}"
            lstr=`eval echo \"'$'${lstr}\"`
            echo "${lstr}: ${1}" >&2
        fi
    fi
}


##
## Global Variables
##

## process pids of main and services
process_all=""

## 0: normal
## 1: main process exited
## 2: a service exited
## 3: catch signal (INT or QUIT or TERM)
## 4: main process launch failed
liveness=0;

## exit code of main process
ret_file=`mktemp`


##
## Functions
##

broadcast_signal() {
    signal=${1}
    for i in ${2}; do
        if [ -e "/proc/${i}" ]; then
            log "send ${signal} to $i"
            kill "-${signal}" ${i}
        fi
    done
}

handle_signal() {
    log "signal ${1} received"
    broadcast_signal ${1} "${process_all}"
}

handle_sighup() {
    log "SIGHUP received"
    broadcast_signal "HUP" "${process_all}"
}

handle_sigint() {
    log "SIGINT received"
    liveness=3
    broadcast_signal "INT" "${process_all}"
}

handle_sigquit() {
    log "SIGQUIT received"
    liveness=3
    broadcast_signal "QUIT" "${process_all}"
}

handle_sigterm() {
    log "SIGTERM received"
    liveness=3
    broadcast_signal "TERM" "${process_all}"
}

panic() {
    log "PANIC!" ${LOG_ERROR}
    log "send SIGTERM to init process." ${LOG_WARN}
    kill -TERM 1
    log "exit with error ${ERROR_PANIC}." ${LOG_WARN}
    exit ${ERROR_PANIC}
}

file_busy_wait() {
    log "file_busy_wait - begin: '${1}' ${2}"

    timer=0
    while :
    do
        log "file_busy_wait - check: ${timer}"

        if [ -s ${1} ]; then
            break
        fi

        timer=`expr ${timer} + 1`
        if [ ${timer} -gt ${2} ]; then
            log "Timeout exceeded while awaiting '${1}'" ${LOG_ERROR}
            panic
        fi

        sleep 1
    done

    log "file_busy_wait - end"

    cat ${1}
}


##
## Main
##

log "tiny-rc.d START" ${LOG_INFO}


##
## Dump Environments
##

log "dump envs - BEGIN"
log "TINYRC_INIT_DIR: ${TINYRC_INIT_DIR}"
log "TINYRC_LIVENESS_PROBE_INITIAL_WAIT: ${TINYRC_LIVENESS_PROBE_INITIAL_WAIT}"
log "TINYRC_LIVENESS_PROBE_INTERVAL: ${TINYRC_LIVENESS_PROBE_INTERVAL}"
log "TINYRC_SHUTDOWN_PROBE_INTERVAL: ${TINYRC_SHUTDOWN_PROBE_INTERVAL}"
log "TINYRC_SHUTDOWN_TIMEOUT: ${TINYRC_SHUTDOWN_TIMEOUT}"
log "TINYRC_SHUTDOWN_SIGNAL: ${TINYRC_SHUTDOWN_SIGNAL}"
log "TINYRC_DISABLE_LOGGING: ${TINYRC_DISABLE_LOGGING}"
log "TINYRC_LOG_LEVEL: ${TINYRC_LOG_LEVEL}"
log "dump envs - END"

##
## Find Units and Services
##

service_list=""
unit_list=""

log "Find Units and Services - BEGIN" ${LOG_INFO}

if [ -d "${TINYRC_INIT_DIR}" ]; then
    for i in `LC_ALL=C; ls ${TINYRC_INIT_DIR}/*`; do
        script="${i}"

        log "found '${script}'"

        [ -d ${script} ] && continue
        [ ! -e ${script} ] && continue
        [ ! -x ${script} ] && continue

        log "${script} is executable"

        echo "${script}" | grep ".unit$" > /dev/null &&:
        if [ $? -eq 0 ]; then
            log "mark '${script}' as unit" ${LOG_INFO}
            unit_list="${unit_list} ${script}"
        fi

        echo "${script}" | grep ".service$" > /dev/null &&:
        if [ $? -eq 0 ]; then
            log "mark '${script}' as service" ${LOG_INFO}
            service_list="${service_list} ${script}"
        fi
    done
else
    log "${TINYRC_INIT_DIR} is not a directory." ${LOG_WARN}
fi

log "Find Units and Services - END" ${LOG_INFO}
log "unit_list: [${unit_list} ]"
log "service_list: [${service_list} ]"


##
## Execute Units
##

log "Execute Units - BEGIN" ${LOG_INFO}

for i in ${unit_list}; do
    log "execute unit: '${i}'" ${LOG_INFO}
    ${i}
    RET=$?
    if [ "$RET" -ne 0 ]; then
        log "unit '${i}' return with error $RET" ${LOG_ERROR}
        exit ${ERROR_RUN_UNIT_FAILED}
    fi
done

log "Execute Units - END" ${LOG_INFO}


##
## Start Services
##

## enable signal handlers
log "Install signal handlers."

log "generic signal handler from 1 to 31 without SIGCHLD"
for i in `seq 1 31`; do
    # ignore SIGCHLD
    if [ ${i} -ne 17 ]; then
        trap "handle_signal ${i}" ${i}
    fi
done

log "generic signal handler from 34 to 64"
for i in `seq 34 64`; do
    trap "handle_signal ${i}" ${i}
done

log "custom signal handler for HUP, INT, QUIT, TERM"
trap "handle_sighup" HUP
trap "handle_sigint" INT
trap "handle_sigquit" QUIT
trap "handle_sigterm" TERM

log "Start Services - BEGIN" ${LOG_INFO}

service_pids=""
main_process_pid=""

for i in ${service_list}; do
    log "start service: '${i}'" ${LOG_INFO}
    ${i} &
    RET=$?
    PID=$!
    service_pids="${service_pids} ${PID}"
    if [ "$RET" -ne 0 ]; then
        log "Start service '${i}' failed with $RET." ${LOG_ERROR}
        exit ${ERROR_RUN_SERVICE_FAILED}
    fi
done

process_all="${service_pids}"

log "Start Services - END" ${LOG_INFO}


##
## Start main process
##

log "Start main process - BEGIN" ${LOG_INFO}
log "cmd: $*"

pid_file=`mktemp`

if [ -x "${1}" ]; then
    (
        set -e
        trap ":" HUP INT QUIT TERM

        $* &
        pid=${!}

        tmpfile=`mktemp`
        echo ${pid} > ${tmpfile}
        mv ${tmpfile} ${pid_file}

        wait ${pid} &&:
        ret=${?}

        tmpfile=`mktemp`
        echo ${ret} > ${tmpfile}
        mv ${tmpfile} ${ret_file}
    ) &

    main_process_pid=`file_busy_wait ${pid_file} 5`

    log "main_process_pid: ${main_process_pid}"

    process_all="${main_process_pid} ${process_all}"
else
    log "'${1}' is not executable." ${LOG_ERROR}
    echo ${ERROR_GENERAL} > ${ret_file}
    liveness=4
fi

log "Start main process - END" ${LOG_INFO}


##
## Liveness probe loop
##

## initial wait
log "Liveness probe initial wait: ${TINYRC_LIVENESS_PROBE_INITIAL_WAIT} sec."
sleep ${TINYRC_LIVENESS_PROBE_INITIAL_WAIT}

log "Liveness probe - BEGIN" ${LOG_INFO}
log "process_all=[${process_all}]"

timer=0
while [ ${liveness} -eq 0 ]
do
    log "Liveness probe: ${timer} sec."

    ## check main process
    if [ ! -e "/proc/${main_process_pid}" ]; then
        liveness=1
        break
    fi

    ## check services
    for i in ${service_pids}; do
        if [ ! -e "/proc/${i}" ]; then
            liveness=2
            break 2
        fi
    done

    timer=`expr ${timer} + ${TINYRC_LIVENESS_PROBE_INTERVAL}`
    sleep ${TINYRC_LIVENESS_PROBE_INTERVAL}
done

log "Liveness probe - END: reason = ${liveness}" ${LOG_INFO}

if [ ${liveness} -eq 2 ]; then
    log "Liveness probe finished due service error." ${LOG_WARN}
fi
if [ ${liveness} -eq 3 ]; then
    log "Liveness probe finished due receive signal." ${LOG_WARN}
fi


##
## Shutdown probe loop
##

log "Shutdown probe - BEGIN" ${LOG_INFO}

timer=0
while :
do
    log "Shutdown probe: ${timer} sec."

    count=0
    for i in ${process_all}; do
        if [ -e "/proc/${i}" ]; then
            log "${i} is still alive."
            count=`expr ${count} + 1`

            broadcast_signal ${TINYRC_SHUTDOWN_SIGNAL} ${i}
        fi
    done

    if [ ${count} -eq 0 ]; then
        break
    fi

    timer=`expr ${timer} + ${TINYRC_SHUTDOWN_PROBE_INTERVAL}`
    if [ ${timer} -ge ${TINYRC_SHUTDOWN_TIMEOUT} ]; then
        log "Shutdown timeout exceeded, give up." ${LOG_WARN}
        panic
    fi

    sleep ${TINYRC_SHUTDOWN_PROBE_INTERVAL}
done

log "Shutdown probe - END" ${LOG_INFO}


##
## process exit
##

log "Retrieve main process exit code."

exit_code=`file_busy_wait ${ret_file} 5`

log "Main process exit code is ${exit_code}."

log "Exit code is ${exit_code}." ${LOG_INFO}

exit ${exit_code}
